Public Class cls緯度経度変換

    '--------------------------------------------------------------------------
    '[名称]:緯度経度変換[世界測地系(度)→日本測地系(度分秒)]
    '[機能]:
    '[入力]:
    '[出力]:
    '[戻値]:
    '[作成]:
    '[更新]:
    '--------------------------------------------------------------------------
    Public Shared Function 世界_度to日本_度分秒(ByVal dbl緯度_度_世界 As Double, ByVal dbl経度_度_世界 As Double, ByRef 緯度_日本測地系 As Integer, ByRef 経度_日本測地系 As Integer) As Boolean

        '----------------------------------------------------------------------
        ' 変数宣言
        '----------------------------------------------------------------------
        'Dim dbl緯度_度_世界 As Double       ' 緯度(度単位:世界測地系)
        'Dim dbl経度_度_世界 As Double       ' 経度(度単位:世界測地系)
        Dim dbl緯度_度_日本 As Double       ' 緯度(度単位:日本測地系)
        Dim dbl経度_度_日本 As Double       ' 経度(度単位:日本測地系)
        Dim dblTmp緯度 As Double            ' 
        Dim dblTmp経度 As Double            ' 
        Dim int緯度_度分秒_日本 As Integer  ' 
        Dim int経度_度分秒_日本 As Integer  ' 

        Try
            '------------------------------------------------------------------
            ' 世界測地系の緯度経度(度)を取得
            '------------------------------------------------------------------
            'dbl緯度_度_世界 = CDbl(Me.txt緯度_世界測地系.Text)
            'dbl経度_度_世界 = CDbl(Me.txt経度_世界測地系.Text)

            '------------------------------------------------------------------
            ' 世界→日本 変換
            '------------------------------------------------------------------
            Call bol緯度経度変換_世界to日本(dbl緯度_度_世界, dbl経度_度_世界, dbl緯度_度_日本, dbl経度_度_日本)

            '------------------------------------------------------------------
            ' 度→度分秒 変換
            '------------------------------------------------------------------
            Call bol度to度分秒(dbl緯度_度_日本, dblTmp緯度)
            Call bol度to度分秒(dbl経度_度_日本, dblTmp経度)

            '------------------------------------------------------------------
            ' 緯度経度(度分秒)作成
            '------------------------------------------------------------------
            ' 緯度(度分秒7桁に整形)
            int緯度_度分秒_日本 = CInt(Math.Round(dblTmp緯度 * 10, 0, MidpointRounding.AwayFromZero)) ' 小数点以下四捨五入

            ' 経度(度分秒8桁に整形)
            int経度_度分秒_日本 = CInt(Math.Round(dblTmp経度 * 10, 0, MidpointRounding.AwayFromZero)) ' 小数点以下四捨五入

            '------------------------------------------------------------------
            ' 画面表示
            '------------------------------------------------------------------
            'Me.txt緯度_日本測地系.Text = CStr(int緯度_度分秒_日本)
            'Me.txt経度_日本測地系.Text = CStr(int経度_度分秒_日本)

            '緯度_日本測地系 = CStr(int緯度_度分秒_日本)
            '経度_日本測地系 = CStr(int経度_度分秒_日本)
            緯度_日本測地系 = int緯度_度分秒_日本
            経度_日本測地系 = int経度_度分秒_日本

            Return True
        Catch ex As Exception
            '------------------------------------------------------------------
            ' ｴﾗｰ発生
            '------------------------------------------------------------------
            Debug.WriteLine("エラー発生。 " + ex.ToString, "世界_度to日本_度分秒")
            Return False
        End Try

    End Function


    '--------------------------------------------------------------------------
    '[名称]:単位変換(度→度分秒)
    '[機能]:
    '[入力]:_dbl度     
    '      :_dbl度分秒 
    '[出力]:
    '[戻値]:
    '[作成]:
    '[更新]:
    '--------------------------------------------------------------------------
    Private Shared Function bol度to度分秒(ByVal _dbl度 As Double, ByRef _dbl度分秒 As Double) As Boolean

        '----------------------------------------------------------------------
        ' 変数宣言
        '----------------------------------------------------------------------
        Dim sho度 As Short          ' 
        Dim sho分 As Short          ' 
        Dim dbl分 As Double         ' 
        Dim str分 As String         ' 
        Dim str度分秒 As String     ' 
        Dim sho度桁数 As Short      ' 
        Dim str度 As String         ' 
        Dim strTmp分 As String      ' 
        Dim sho分桁数 As Short      ' 
        Dim str秒 As String         ' 
        Dim strTmp秒 As String      ' 
        Dim dbl秒 As Double         ' 
        Dim strCk秒 As String       ' 
        Dim intFind As Integer      ' 

        Try
            '------------------------------------------------------------------
            ' 度を求める
            '------------------------------------------------------------------
            sho度 = CShort(ToRoundDown(_dbl度, 0))              ' 整数部分

            '------------------------------------------------------------------
            ' 分を求める
            '------------------------------------------------------------------
            'dbl分 = _dbl度 - CDbl(sho度)               ' 小数点以下をDouble型の引き算で求めると誤差が出るので文字列で求める

            sho度桁数 = CShort(sho度.ToString.Length)           ' 度(整数部分)の桁数を取得
            str度 = _dbl度.ToString                     ' 度を文字列化
            strTmp分 = str度.Substring(sho度桁数)       ' 小数点部分を切り出し
            strTmp分 = "0" & strTmp分                   ' 小数点部分を作成
            dbl分 = CDbl(strTmp分)                      ' 分をDouble型に変換
            dbl分 = dbl分 * 60                          ' 分に変換(60分をかける)
            sho分 = CShort(ToRoundDown(dbl分, 0))               ' 分を取得
            str分 = Format(sho分, "00")                 ' ｾﾞﾛｻﾌﾟﾚｽ

            '------------------------------------------------------------------
            ' 秒を求める
            '------------------------------------------------------------------
            sho分桁数 = CShort(sho分.ToString.Length)           ' 分(整数部分)の桁数を取得
            strTmp秒 = dbl分.ToString                   ' 分を文字列化
            strTmp秒 = strTmp秒.Substring(sho分桁数)    ' 小数点部分を切り出し
            str秒 = "0" & strTmp秒                      ' 小数点部分を作成
            dbl秒 = CDbl(str秒)                         ' 秒をDouble型に変換
            dbl秒 = dbl秒 * 60                          ' 秒に変換(60秒をかける)

            strCk秒 = dbl秒.ToString                    ' 
            intFind = strCk秒.IndexOf(".")              ' 
            If intFind = 1 Then
                strCk秒 = "0" & strCk秒                 ' ｾﾞﾛｻﾌﾟﾚｽ
            End If

            '------------------------------------------------------------------
            ' 度分秒作成
            '------------------------------------------------------------------
            str度分秒 = CStr(sho度) & str分 & strCk秒   ' 
            _dbl度分秒 = CDbl(str度分秒)                ' 

            '------------------------------------------------------------------
            ' 戻り値
            '------------------------------------------------------------------
            Return True

        Catch ex As Exception
            '------------------------------------------------------------------
            ' ｴﾗｰ処理
            '------------------------------------------------------------------
            Debug.WriteLine(ex.ToString)
            Return False

        End Try

    End Function

    ''' ------------------------------------------------------------------------
    ''' <summary>
    '''     指定した精度の数値に切り捨てします。</summary>
    ''' <param name="dValue">
    '''     丸め対象の倍精度浮動小数点数。</param>
    ''' <param name="iDigits">
    '''     戻り値の有効桁数の精度。</param>
    ''' <returns>
    '''     iDigits に等しい精度の数値に切り捨てられた数値。</returns>
    ''' ------------------------------------------------------------------------
    Public Shared Function ToRoundDown(ByVal dValue As Double, ByVal iDigits As Integer) As Double
        Dim dCoef As Double = System.Math.Pow(10, iDigits)

        If dValue > 0 Then
            Return System.Math.Floor(dValue * dCoef) / dCoef
        Else
            Return System.Math.Ceiling(dValue * dCoef) / dCoef
        End If
    End Function

    '--------------------------------------------------------------------------
    '[名称]:緯度経度変換(世界測地系→日本測地系 )
    '[機能]:度単位で変換を行う
    '[入力]:_dbl緯度_世界(度単位)
    '      :_dbl経度_世界(度単位)
    '[出力]:_dbl緯度_日本(度単位)
    '      :_dbl経度_日本(度単位)
    '[戻値]:True  処理成功
    '      :False 処理失敗
    '[作成]:
    '[更新]:
    '--------------------------------------------------------------------------
    Public Shared Function bol緯度経度変換_世界to日本(ByVal _dbl緯度_世界 As Double, ByVal _dbl経度_世界 As Double,
                                                ByRef _dbl緯度_日本 As Double, ByRef _dbl経度_日本 As Double) As Boolean

        Try
            '------------------------------------------------------------------
            ' 世界→日本 変換
            '------------------------------------------------------------------
            _dbl緯度_日本 = _dbl緯度_世界 + (0.00010696 * _dbl緯度_世界) - (0.000017467 * _dbl経度_世界) - 0.004602
            _dbl経度_日本 = _dbl経度_世界 + (0.000046047 * _dbl緯度_世界) + (0.000083049 * _dbl経度_世界) - 0.010041

            '------------------------------------------------------------------
            ' 戻り値
            '------------------------------------------------------------------
            Return True

        Catch ex As Exception
            '------------------------------------------------------------------
            ' ｴﾗｰ処理
            '------------------------------------------------------------------
            Debug.WriteLine(ex.ToString)
            Return False

        End Try

    End Function

    Public Shared Function bol緯度経度変換_日本to世界(ByVal _dbl緯度_日本 As Double, ByVal _dbl経度_日本 As Double,
                                                   ByRef _dbl緯度_世界 As Double, ByRef _dbl経度_世界 As Double) As Boolean

        Try
            '------------------------------------------------------------------
            ' 世界→日本 変換
            '------------------------------------------------------------------
            _dbl緯度_世界 = _dbl緯度_日本 - (0.00010696 * _dbl緯度_日本) + (0.000017467 * _dbl経度_日本) + 0.004602
            _dbl経度_世界 = _dbl経度_日本 - (0.000046047 * _dbl緯度_日本) - (0.000083049 * _dbl経度_日本) + 0.010041

            '------------------------------------------------------------------
            ' 戻り値
            '------------------------------------------------------------------
            Return True

        Catch ex As Exception
            '------------------------------------------------------------------
            ' ｴﾗｰ処理
            '------------------------------------------------------------------
            Debug.WriteLine(ex.ToString)
            Return False

        End Try

    End Function
End Class